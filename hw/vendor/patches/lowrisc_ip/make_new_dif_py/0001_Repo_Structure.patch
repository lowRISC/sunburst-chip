diff --git a/make_new_dif.py b/make_new_dif.py
index b654fec..04c2e9f 100755
--- a/make_new_dif.py
+++ b/make_new_dif.py
@@ -48,9 +48,10 @@
 from make_new_dif.ip import Ip
 from mako.template import Template
 
+# This file is $IP_TOP/hw/vendor/lowrisc_ip/util/make_new_dif.py, so it takes five parent()
-# This file is $REPO_TOP/util/make_new_dif.py, so it takes two parent()
 # calls to get back to the top.
+IP_TOP = Path(__file__).resolve().parent.parent
+REPO_TOP = IP_TOP.parent.parent.parent
-REPO_TOP = Path(__file__).resolve().parent.parent
 
 ALL_PARTS = ["header", "checklist", "autogen"]
 
@@ -95,12 +96,15 @@
     try:
         with open(topcfg_path, 'r') as ftop:
             topcfg = hjson.load(ftop, use_decimal=True)
+        templated_modules = lib.get_templated_modules(topcfg)
+        ipgen_modules = lib.get_ipgen_modules(topcfg)
+        reggen_top_modules = lib.get_top_reggen_modules(topcfg)
     except FileNotFoundError:
+        print(f"Warning: hjson {topcfg_path} could not be found")
+        templated_modules = []
+        ipgen_modules = []
+        reggen_top_modules = []
+    #    sys.exit(1)
-        print(f"hjson {topcfg_path} could not be found")
-        sys.exit(1)
-    templated_modules = lib.get_templated_modules(topcfg)
-    ipgen_modules = lib.get_ipgen_modules(topcfg)
-    reggen_top_modules = lib.get_top_reggen_modules(topcfg)
 
     # Check for regeneration mode (used in CI check:
     # ci/scripts/check-generated.sh)
@@ -137,7 +141,7 @@
         autogen_dif_dir.mkdir(exist_ok=True)
 
     # Render DIF templates.
+    template_path = IP_TOP / "util/make_new_dif/templates"
-    template_path = REPO_TOP / "util/make_new_dif/templates"
     for ip in ips:
         if "header" in args.only:
             header_template_file = template_path / "dif_template.h.tpl"
@@ -178,8 +182,7 @@
         # Format autogenerated file with clang-format.
         try:
             subprocess.check_call(
+                ["clang-format", "-i", "--"] + out_files)
-                ["./bazelisk.sh", "run", "//quality:clang_format_fix", "--"] +
-                out_files)
         except subprocess.CalledProcessError:
             logging.error(f"failed to format {out_file} with clang-format.")
             sys.exit(1)
