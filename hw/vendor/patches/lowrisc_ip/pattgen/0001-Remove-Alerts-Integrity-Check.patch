diff --git a/rtl/pattgen.sv b/rtl/pattgen.sv
index 96d283e..b505622 100644
--- a/rtl/pattgen.sv
+++ b/rtl/pattgen.sv
@@ -5,19 +5,13 @@
 `include "prim_assert.sv"
 
 module pattgen
-  import pattgen_reg_pkg::*;
-#(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
-) (
+  import pattgen_reg_pkg::*; (
   input clk_i,
   input rst_ni,
 
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   output logic cio_pda0_tx_o,
   output logic cio_pcl0_tx_o,
   output logic cio_pda1_tx_o,
@@ -31,7 +25,6 @@ module pattgen
   output logic intr_done_ch1_o
 );
 
-  logic [NumAlerts-1:0] alert_test, alerts;
   pattgen_reg2hw_t reg2hw;
   pattgen_hw2reg_t hw2reg;
 
@@ -41,32 +34,9 @@ module pattgen
     .tl_i,
     .tl_o,
     .reg2hw,
-    .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o(alerts[0])
+    .hw2reg
   );
 
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   assign cio_pda0_tx_en_o = 1'b1;
   assign cio_pcl0_tx_en_o = 1'b1;
   assign cio_pda1_tx_en_o = 1'b1;
@@ -89,7 +59,6 @@ module pattgen
 
   `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
   `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
-  `ASSERT_KNOWN(AlertsKnown_A, alert_tx_o)
   `ASSERT_KNOWN(Pcl0TxKnownO_A, cio_pcl0_tx_o)
   `ASSERT_KNOWN(Pda0TxKnownO_A, cio_pda0_tx_o)
   `ASSERT_KNOWN(Pcl1TxKnownO_A, cio_pcl1_tx_o)
@@ -101,7 +70,4 @@ module pattgen
   `ASSERT(Pda0TxEnIsOne_A, cio_pda0_tx_en_o === 1'b1)
   `ASSERT(Pcl1TxEnIsOne_A, cio_pcl1_tx_en_o === 1'b1)
   `ASSERT(Pda1TxEnIsOne_A, cio_pda1_tx_en_o === 1'b1)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule : pattgen
diff --git a/rtl/pattgen_reg_top.sv b/rtl/pattgen_reg_top.sv
index 3091b55..02bfcf4 100644
--- a/rtl/pattgen_reg_top.sv
+++ b/rtl/pattgen_reg_top.sv
@@ -13,10 +13,7 @@ module pattgen_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output pattgen_reg_pkg::pattgen_reg2hw_t reg2hw, // Write
-  input  pattgen_reg_pkg::pattgen_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  pattgen_reg_pkg::pattgen_hw2reg_t hw2reg // Read
 );
 
   import pattgen_reg_pkg::* ;
@@ -42,40 +39,6 @@ module pattgen_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [11:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(12)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -116,7 +79,7 @@ module pattgen_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -952,23 +915,6 @@ module pattgen_reg_top (
 
   assign size_reps_ch1_wd = reg_wdata[31:22];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = ctrl_we;
-    reg_we_check[5] = prediv_ch0_we;
-    reg_we_check[6] = prediv_ch1_we;
-    reg_we_check[7] = data_ch0_0_we;
-    reg_we_check[8] = data_ch0_1_we;
-    reg_we_check[9] = data_ch1_0_we;
-    reg_we_check[10] = data_ch1_1_we;
-    reg_we_check[11] = size_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
