diff --git a/rtl/pwm.sv b/rtl/pwm.sv
index 21925e9..060cf51 100644
--- a/rtl/pwm.sv
+++ b/rtl/pwm.sv
@@ -7,7 +7,6 @@
 module pwm
   import pwm_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}},
   parameter int PhaseCntDw = 16,
   parameter int BeatCntDw = 27
 ) (
@@ -20,15 +19,11 @@ module pwm
   input                       tlul_pkg::tl_h2d_t tl_i,
   output                      tlul_pkg::tl_d2h_t tl_o,
 
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   output logic [NOutputs-1:0] cio_pwm_o,
   output logic [NOutputs-1:0] cio_pwm_en_o
 );
 
   pwm_reg_pkg::pwm_reg2hw_t reg2hw;
-  logic [NumAlerts-1:0] alert_test, alerts;
 
   pwm_reg_top u_reg (
     .clk_i,
@@ -37,32 +32,9 @@ module pwm
     .rst_core_ni,
     .tl_i       (tl_i),
     .tl_o       (tl_o),
-    .reg2hw     (reg2hw),
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (alerts[0])
+    .reg2hw     (reg2hw)
   );
 
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   assign cio_pwm_en_o = {NOutputs{1'b1}};
 
   pwm_core #(
@@ -79,11 +51,6 @@ module pwm
   `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
   `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
 
-  `ASSERT_KNOWN(AlertKnownO_A, alert_tx_o)
-
   `ASSERT_KNOWN(CioPWMKnownO_A, cio_pwm_o)
   `ASSERT(CioPWMEnIsOneO_A, (&cio_pwm_en_o) === 1'b1)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule : pwm
diff --git a/rtl/pwm_reg_top.sv b/rtl/pwm_reg_top.sv
index 2d1eee5..ac134ae 100644
--- a/rtl/pwm_reg_top.sv
+++ b/rtl/pwm_reg_top.sv
@@ -14,10 +14,7 @@ module pwm_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output pwm_reg_pkg::pwm_reg2hw_t reg2hw, // Write
-
-  // Integrity check errors
-  output logic intg_err_o
+  output pwm_reg_pkg::pwm_reg2hw_t reg2hw // Write
 );
 
   import pwm_reg_pkg::* ;
@@ -43,40 +40,6 @@ module pwm_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [22:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(23)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -117,7 +80,7 @@ module pwm_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -3228,36 +3191,6 @@ module pwm_reg_top (
 
   assign blink_param_5_we = addr_hit[22] & reg_we & !reg_error;
 
-
-
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = alert_test_we;
-    reg_we_check[1] = regwen_we;
-    reg_we_check[2] = cfg_we;
-    reg_we_check[3] = pwm_en_we;
-    reg_we_check[4] = invert_we;
-    reg_we_check[5] = pwm_param_0_we;
-    reg_we_check[6] = pwm_param_1_we;
-    reg_we_check[7] = pwm_param_2_we;
-    reg_we_check[8] = pwm_param_3_we;
-    reg_we_check[9] = pwm_param_4_we;
-    reg_we_check[10] = pwm_param_5_we;
-    reg_we_check[11] = duty_cycle_0_we;
-    reg_we_check[12] = duty_cycle_1_we;
-    reg_we_check[13] = duty_cycle_2_we;
-    reg_we_check[14] = duty_cycle_3_we;
-    reg_we_check[15] = duty_cycle_4_we;
-    reg_we_check[16] = duty_cycle_5_we;
-    reg_we_check[17] = blink_param_0_we;
-    reg_we_check[18] = blink_param_1_we;
-    reg_we_check[19] = blink_param_2_we;
-    reg_we_check[20] = blink_param_3_we;
-    reg_we_check[21] = blink_param_4_we;
-    reg_we_check[22] = blink_param_5_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
