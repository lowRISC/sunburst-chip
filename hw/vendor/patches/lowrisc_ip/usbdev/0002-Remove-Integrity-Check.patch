diff --git a/rtl/usbdev.sv b/rtl/usbdev.sv
index 5b95991..41d7ce3 100644
--- a/rtl/usbdev.sv
+++ b/rtl/usbdev.sv
@@ -868,10 +868,7 @@ module usbdev
     .tl_win_i (tl_sram_d2h),
 
     .reg2hw(reg2hw_regtop),
-    .hw2reg(hw2reg_regtop),
-
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o ()
+    .hw2reg(hw2reg_regtop)
   );
 
   // Stub off all register connections to reg_top.
diff --git a/rtl/usbdev_reg_top.sv b/rtl/usbdev_reg_top.sv
index 5cffa86..d7d9322 100644
--- a/rtl/usbdev_reg_top.sv
+++ b/rtl/usbdev_reg_top.sv
@@ -20,10 +20,7 @@ module usbdev_reg_top (
 
   // To HW
   output usbdev_reg_pkg::usbdev_reg2hw_t reg2hw, // Write
-  input  usbdev_reg_pkg::usbdev_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  usbdev_reg_pkg::usbdev_hw2reg_t hw2reg  // Read
 );
 
   import usbdev_reg_pkg::* ;
@@ -49,40 +46,6 @@ module usbdev_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [42:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(43)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -133,11 +96,6 @@ module usbdev_reg_top (
         tl_i.a_address[AW-1:0] inside {[2048:4095]} ? 1'd0 :
         // Default set to register
         1'd1;
-
-    // Override this in case of an integrity error
-    if (intg_err) begin
-      reg_steer = 1'd1;
-    end
   end
 
   tlul_adapter_reg #(
@@ -167,7 +125,7 @@ module usbdev_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -9378,54 +9336,6 @@ module usbdev_reg_top (
 
   assign count_errors_rst_wd = reg_wdata[31];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = usbctrl_we;
-    reg_we_check[5] = ep_out_enable_we;
-    reg_we_check[6] = ep_in_enable_we;
-    reg_we_check[7] = 1'b0;
-    reg_we_check[8] = avoutbuffer_we;
-    reg_we_check[9] = avsetupbuffer_we;
-    reg_we_check[10] = 1'b0;
-    reg_we_check[11] = rxenable_setup_we;
-    reg_we_check[12] = rxenable_out_we;
-    reg_we_check[13] = set_nak_out_we;
-    reg_we_check[14] = in_sent_we;
-    reg_we_check[15] = out_stall_we;
-    reg_we_check[16] = in_stall_we;
-    reg_we_check[17] = configin_0_we;
-    reg_we_check[18] = configin_1_we;
-    reg_we_check[19] = configin_2_we;
-    reg_we_check[20] = configin_3_we;
-    reg_we_check[21] = configin_4_we;
-    reg_we_check[22] = configin_5_we;
-    reg_we_check[23] = configin_6_we;
-    reg_we_check[24] = configin_7_we;
-    reg_we_check[25] = configin_8_we;
-    reg_we_check[26] = configin_9_we;
-    reg_we_check[27] = configin_10_we;
-    reg_we_check[28] = configin_11_we;
-    reg_we_check[29] = out_iso_we;
-    reg_we_check[30] = in_iso_we;
-    reg_we_check[31] = out_data_toggle_we;
-    reg_we_check[32] = in_data_toggle_we;
-    reg_we_check[33] = 1'b0;
-    reg_we_check[34] = phy_pins_drive_we;
-    reg_we_check[35] = phy_config_we;
-    reg_we_check[36] = wake_control_we;
-    reg_we_check[37] = 1'b0;
-    reg_we_check[38] = fifo_ctrl_we;
-    reg_we_check[39] = count_out_we;
-    reg_we_check[40] = count_in_we;
-    reg_we_check[41] = count_nodata_in_we;
-    reg_we_check[42] = count_errors_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
