diff --git a/rtl/spi_host.sv b/rtl/spi_host.sv
index f53bb6b..c836ace 100644
--- a/rtl/spi_host.sv
+++ b/rtl/spi_host.sv
@@ -91,7 +91,6 @@ module spi_host
     .tl_win_i         ( fifo_win_d2h           ),
     .reg2hw,
     .hw2reg,
-    .intg_err_o       ( 0                      ),
     .racl_policies_i  ( racl_policies_i        ),
     .racl_error_o     ( racl_error[0]          )
   );
diff --git a/rtl/spi_host_reg_top.sv b/rtl/spi_host_reg_top.sv
index b1360b2..dbaba05 100644
--- a/rtl/spi_host_reg_top.sv
+++ b/rtl/spi_host_reg_top.sv
@@ -28,10 +28,7 @@ module spi_host_reg_top
 
   // RACL interface
   input  top_racl_pkg::racl_policy_vec_t racl_policies_i,
-  output top_racl_pkg::racl_error_log_t  racl_error_o,
-
-  // Integrity check errors
-  output logic intg_err_o
+  output top_racl_pkg::racl_error_log_t  racl_error_o
 );
 
   import spi_host_reg_pkg::* ;
@@ -57,40 +54,6 @@ module spi_host_reg_top
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [11:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(12)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -144,11 +107,6 @@ module spi_host_reg_top
         tl_i.a_address[AW-1:0] inside {[40:43]} ? 2'd1 :
         // Default set to register
         2'd2;
-
-    // Override this in case of an integrity error
-    if (intg_err) begin
-      reg_steer = 2'd2;
-    end
   end
 
   tlul_adapter_reg #(
@@ -179,7 +137,7 @@ module spi_host_reg_top
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -1906,23 +1864,6 @@ module spi_host_reg_top
 
   assign event_enable_idle_wd = reg_wdata[5];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = control_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = configopts_we;
-    reg_we_check[7] = csid_we;
-    reg_we_check[8] = command_we;
-    reg_we_check[9] = error_enable_we;
-    reg_we_check[10] = error_status_we;
-    reg_we_check[11] = event_enable_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
