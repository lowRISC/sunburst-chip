diff --git a/data/rv_plic.hjson.tpl b/data/rv_plic.hjson.tpl
index b926fea..23c1204 100644
--- a/data/rv_plic.hjson.tpl
+++ b/data/rv_plic.hjson.tpl
@@ -196,19 +196,5 @@
       ],
     }
 % endfor
-  { skipto: "0x4004000" }
-  { name: "ALERT_TEST",
-      desc: '''Alert Test Register.''',
-      swaccess: "wo",
-      hwaccess: "hro",
-      hwqe:     "True",
-      hwext:    "True",
-      fields: [
-        { bits: "0",
-          name: "fatal_fault",
-          desc: "'Write 1 to trigger one alert event of this kind.'",
-        }
-      ],
-    }
   ],
 }
diff --git a/rtl/rv_plic.sv.tpl b/rtl/rv_plic.sv.tpl
index 6cd349b..b8d6d3b 100644
--- a/rtl/rv_plic.sv.tpl
+++ b/rtl/rv_plic.sv.tpl
@@ -15,7 +15,6 @@
 //   MAX_PRIO: Maximum value of interrupt priority
 
 module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn  = {NumAlerts{1'b1}},
   // OpenTitan IP standardizes on level triggered interrupts,
   // hence LevelEdgeTrig is set to all-zeroes by default.
   // Note that in case of edge-triggered interrupts, CDC handling is not
@@ -35,10 +34,6 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
   // Interrupt Sources
   input  [NumSrc-1:0] intr_src_i,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
   output [SRCW-1:0]      irq_id_o [NumTarget],
@@ -195,33 +190,6 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
     );
   end
 
-  ////////////
-  // Alerts //
-  ////////////
-
-  logic [NumAlerts-1:0] alert_test, alerts;
-
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[i]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   ////////////////////////
   // Register interface //
   ////////////////////////
@@ -235,10 +203,7 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
     .tl_o,
 
     .reg2hw,
-    .hw2reg,
-
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o(alerts[0])
+    .hw2reg
   );
 
   // Assertions
@@ -252,32 +217,4 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
 
   // Assume
   `ASSUME(Irq0Tied_A, intr_src_i[0] == 1'b0)
-
-  // This assertion should be provable in FPV because we don't have a block-level DV environment. It
-  // is trying to say that any integrity error detected inside the register block (u_reg) will cause
-  // an alert to be asserted within at most _SEC_CM_ALERT_MAX_CYC cycles.
-  //
-  // This isn't *quite* true because there are two extra requirements for prim_alert_sender to send
-  // an alert with alert_p high:
-  //
-  //  - The multi-phase alert handshake might not be in the expected phase. Rather than adding an
-  //    assumption that says alert_rx_i acks a signal when it is raised, we cheat and add a
-  //    precondition about the initial state of the prim_alert_sender FSM, guaranteeing that we're
-  //    not waiting for an ack.
-  //
-  //  - The prim_alert_sender musn't detect a signal integrity issue on the alert signal coming in
-  //    (alert_rx_i). Normally FpvSecCm tests get analysed with an FPV_ALERT_NO_SIGINT_ERR define,
-  //    but we don't have that defined here. To avoid this happening, we want an assertion of the
-  //    form "If no integrity error is detected for _SEC_CM_ALERT_MAX_CYC cycles, the alert_p signal
-  //    must go high". To encode this cleanly in SVA, we actually say "We can't have neither an
-  //    integrity error nor an alert signal for too many cycles".
-  `ASSERT(FpvSecCmBusIntegrity_A,
-          ($rose(u_reg.intg_err) &&
-           gen_alert_tx[0].u_prim_alert_sender.state_q == gen_alert_tx[0].u_prim_alert_sender.Idle)
-          |->
-          not ((!gen_alert_tx[0].u_prim_alert_sender.sigint_detected && !alert_tx_o[0].alert_p)
-               [*`_SEC_CM_ALERT_MAX_CYC]))
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rv_plic_component.core.tpl b/rv_plic_component.core.tpl
index 93373c5..aa391f0 100644
--- a/rv_plic_component.core.tpl
+++ b/rv_plic_component.core.tpl
@@ -9,10 +9,8 @@ filesets:
   files_rtl:
     depend:
       - lowrisc:prim:assert
-      - lowrisc:prim:alert
       - lowrisc:prim:max_tree
       - lowrisc:prim:flop_2sync
-      - lowrisc:prim:reg_we_check
     files:
       - rtl/${module_instance_name}_gateway.sv
       - rtl/${module_instance_name}_target.sv
